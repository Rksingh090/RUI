/* full screen and with center */
.rectScreen {
    height: 100vh;
    width: 100%;
    background-color: var(--background);
}

.rectScreen.center {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
.rectScreen.oHidden {
    overflow: hidden;
}

.rectScreen.gapSM {
    gap: 7px;
}

.rectScreen.gapMD {
    gap: 15px;
}

.fullX {
    width: 100%;
}

.fullXY {
    width: 100%;
    min-height: 100%;
}

/* splash animation  */
.showSplash {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--background);
    z-index: 88768;
}

.splashAnimation {
    font-size: 45px;
    position: relative;
}

.splashAnimation::after {
    content: "";
    position: absolute;
    top: 0;
    left: -100px;
    animation: fadeIn 2.5s 1 linear;
}


@keyframes fadeIn {
    0% {
        content: "R";
    }
    25% {
        content: "RP";
    }
    40% {
        content: "RPA";
    }
    55% {
        content: "RPAN";
    }
    70% {
        content: "RPANE";
    }
    85% {
        content: "RPANEL";
        transform: scale(1);
        opacity: 1;
    }
    100% {
        transform: scale(20);
        opacity: 0;
    }
}


/* min height class  */
.minHeightDiv {
    min-height: var(--bodyHeight);
    max-height: var(--bodyHeight);
    background-color: var(--secondaryBg);
    overflow: auto;
}



/* icon btn  */
.iconBtn {
    background-color: var(--background);
    color: var(--color);
    border: none;
    outline: none;
    padding: 6px 12px;
    cursor: pointer;
}

.iconBtn,
.iconBtn * {
    transition: all .1s ease;
}

.iconBtn.small {
    padding: 4px 7px;
    font-size: 11px;
}

.iconBtn span,
.iconBtn svg {
    color: inherit;
}

.iconBtn.noPad {
    padding: 0;
}

.iconBtn.round {
    border-radius: 5px;
}

.iconBtn.withShadow {
    box-shadow: var(--shadowSM);
}

.iconBtn.primaryBg {
    background-color: var(--primaryColor);
}

.iconBtn.secondaryBg {
    color: var(--color);
    background-color: var(--secondaryBg);
}

.iconBtn.primaryBg svg,
.iconBtn.primaryBg span {
    color: white;
    fill: white;
}

.iconBtn.noBg {
    background-color: transparent;
    box-shadow: none;
}

.iconBtn.fontSM {
    font-size: 10px;
}

.iconBtn.fontMD {
    font-size: 12px;
}

.iconBtn.fontLG {
    font-size: 14px;
}

.iconLoading {
    animation: spin 1s infinite;
    animation-timing-function: linear;
}

@keyframes spin {
    to {
        transform: rotateZ(360deg);
    }
}

.iconBtn.success {
    background-color: var(--success);
    color: white;
}

.iconBtn.warning {
    background-color: var(--warning);
    color: white;
}

.iconBtn.error {
    background-color: var(--error);
    color: white;
}

.iconBtn.info {
    background-color: var(--info);
    color: white;
}

.iconBtn:not(.noBg):disabled {
    background-color: var(--secondaryBg);
    color: var(--color);
}

.iconBtn.hoverMain:hover{
    color: white;
    background-color: var(--primaryColor);
}

.iconBtn.hoverSuccess:hover{
    color: white;
    background-color: var(--success);
}
.iconBtn.hoverError:hover{
    color: white;
    background-color: var(--error);
}
.iconBtn.hoverWarning:hover{
    color: white;
    background-color: var(--warning);
}
.iconBtn.hoverWarning:hover{
    color: white;
    background-color: var(--warning);
}
.iconBtn.hoverInfo:hover{
    color: white;
    background-color: var(--info);
}


/* custom inut with --background and --color  */
.RInput {
    background-color: var(--background);
    color: var(--color);
    display: flex;
    flex-direction: row;
    align-items: center;
    padding: 0 5px;
}

.RInput.secondaryBg {
    background-color: var(--secondaryBg);
}

.RInput>input {
    color: var(--color);
    border: none;
    outline: none;
    padding: 8px;
    font-size: 12px;
    width: 100%;
    background-color: transparent;
}

.RInput>input::placeholder {
    color: var(--fadeText);
}

/* r table  */

.RTable {
    width: 100%;
    border-collapse: collapse;
    background-color: var(--background);
}

.RTable th {
    font-weight: 600;
    background-color: var(--secondaryBg);
    padding: 10px;
    font-size: 12px;
    text-align: left;
    color: var(--color);
}

.RTable td {
    color: var(--color);
    text-align: left;
    font-size: 12px;
    padding: 4px 10px;
}

.RTable tr {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
}

/* bordered table  */
.RTable.bordered {
    border: 1px solid var(--secondaryBg);
}


.RTable.bordered th:not(:last-child),
.RTable.bordered tr:not(:last-child) td:not(:last-child) {
    border-right: 1px solid var(--secondaryBg);
    border-bottom: 1px solid var(--secondaryBg);
}

.RTable.bordered tr:last-child td:not(:last-child) {
    border-right: 1px solid var(--secondaryBg);
}

.RTable.bordered th:last-child,
.RTable.bordered tr:not(:last-child) td:last-child {
    border-bottom: 1px solid var(--secondaryBg);
}

/* zebra style border */
.RTable.bordered.zebra {
    border: 1px solid var(--background);
}

.RTable.zebra tr:nth-child(even) {
    background-color: var(--secondaryBg);
}


/* circular progess bar  */
#progressBar {
    position: relative;
    height: 100%;
}

#progressBar svg#bar {
    height: 100%;
    aspect-ratio: 1;
    margin: auto;
    display: block;
}

#progressBar svg#bar path {
    stroke-linecap: round;
    stroke-width: 6;
}

#progressBar svg#bar path.grey {
    stroke: #e7e7e8;
}

#progressBar svg#bar path.blue {
    stroke-dasharray: 198;
    transition: all 2s ease;
    stroke-dashoffset: calc((100 - var(--percent)) * 1.98);
    stroke: hsl(calc(100 - var(--percent)), 100%, 50%);
}

#progressBar .progressText {
    fill: var(--color);
    transition: all .3s ease;
    position: absolute;
    top: 60%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 12px;
    white-space: nowrap;
}



.splitHeader {
    display: flex;
    width: 100%;
    background-color: var(--background);
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
}

.splitHeader.pad {
    padding: 7px;
}


/* loading state  */
.withLoading {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.withLoading.mainBg {
    background-color: var(--background);
}

.withLoading.secondaryBg {
    background-color: var(--secondaryBg);
}

.withLoading .spinner {
    animation: spin .8s linear infinite;
    stroke: var(--primaryColor);
}


/* container status with color  */
.containerStatus {
    text-transform: capitalize;
}

.containerStatus.running {
    color: var(--success);
}

.containerStatus.paused {
    color: var(--warning);
}

.containerStatus.exited {
    color: var(--error);
}

.containerStatus.restarting {
    color: var(--info);
}


/* rmodal  */
.RModal {
    position: fixed;
    background-color: var(--modalBG);
    top: 0;
    left: 0;
    height: 100vh;
    width: 100%;
    z-index: 54564;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.RModal .modalForm {
    background-color: var(--background);
    padding: 15px;
    border-radius: var(--roundSM);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
}



/* r toggle switch */
.RToggleSwitch {
    position: relative;
    display: inline-block;
    height: 18px;
    aspect-ratio: 1.8;
}

.RToggleSwitch.MD {
    height: 22px;
}

.RToggleSwitch.withShadow {
    box-shadow: none;
}

.RToggleSwitch input[type="checkbox"] {
    display: none;
}

.RToggleSwitch .switch {
    position: absolute;
    cursor: pointer;
    background-color: var(--fadeText);
    border-radius: 18px;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transition: background-color 0.2s ease;
}

.RToggleSwitch.MD .switch {
    border-radius: 22px;
}

.RToggleSwitch.withShadow .switch {
    box-shadow: var(--shadowSM);
}


.RToggleSwitch .switch::before {
    position: absolute;
    content: "";
    left: 2px;
    top: 2px;
    width: 14px;
    height: 14px;
    background-color: var(--background);
    border-radius: 50%;
    transition: transform 0.3s ease;
}

.RToggleSwitch.MD .switch::before {
    width: 18px;
    height: 18px;
}

.RToggleSwitch input[type="checkbox"]:checked+.switch::before {
    transform: translateX(14px);
    background-color: var(--primaryColor);
}

.RToggleSwitch.MD input[type="checkbox"]:checked+.switch::before {
    transform: translateX(17px);
}

.RToggleSwitch input[type="checkbox"]:checked+.switch {
    background-color: var(--background);
}
